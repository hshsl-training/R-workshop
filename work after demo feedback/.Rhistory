source('~/Documents/work/R workshop/workshop_scripts.R', echo=TRUE)
library(ggplot2)
data(diamonds)
head(diamonds)
p <- ggplot(diamonds, aes(x=clarity, fill=cut))
p + geom_bar()
p <- ggplot(diamonds, aes(cut))
p + geom_histogram()
summary(diamonds)
p <- ggplot(diamonds, aes(cut))
p + geom_bar
p + geom_bar()
p <- ggplot(diamonds, aes(color))
p + geom_bar()
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar()
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + opts(title = "my title")
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + ggtitle("my title")
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + labs(title="Diamonds color count filled by cut count")
p <- ggplot(diamonds, aes(cut))
p + geom_histogram() + labs(title="Diamonds color count filled by cut count")
p <- ggplot(diamonds, aes(x=clarity, fill=cut))
p + geom_bar() + labs(title="Diamonds color count filled by cut count")
p + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE) + labs(title="Smoothing trends of diamond carat prices by clarity of diamond")
help("diamonds")
data("mtcars")
head(mtcars)
help(mtcars)
mtcars$mpg
cor.test(mtcars$mpg, mtcars$wt)
head(mtcars)
mtcars$mpg
mtcars$wt
cor.test(mtcars$mpg, mtcars$wt)
summary(mtcars)
mtcars$mpg
mtcars$wt
cor.test(mtcars$mpg, mtcars$wt)
fit = lm(mpg ~ wt, mtcars)
sumary(fit)
summary(fit)
fit = lm(mpg ~ wt, mtcars)
fit = lm(mpg ~ wt, mtcars)
summary(fit)
3 +5
3 + 5
10 * 10
#
# Basic arithmatic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
#
# Basic arithmatic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
#
# Basic arithmetic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
variable <- 5
variable
x <- 5
y <- 6
y - x
sqrt(x)
sqrt(y)
y <- 9
sqrt(y)
help("diamonds")
help(mtcars)                  # Show the description of the mtcars dataset
example("knit")
example("ggplot")
library()
library("ggplot2")
# Load the diamonds dataset provided by ggplot2
data("diamonds")
# Show only the first 6 rows of the diamonds data
head(diamonds)
# Show all of the diamonds data
View(diamonds)
# Show metadata about the diamonds data
help(diamonds)
# Create default scatter plot from diamonds data
# This plot will show a relationship between two attributes
# in the dataset: as weight increases, price increases.
# Now, there are three parts to a ggplot2 graph. The first is the data
# we'll be graphing. In this case, we are plotting the diamonds data frame,
# so we type "diamonds". Second, we show the mapping of aesthetics to the
# attributes we'll be plotting. We type aes- meaning aesthetics- then open
# parentheses, and now our assignments: we say "x=carat", saying we want to
# put carat on the x-axis, then "y=price", saying what we want to put on the y-axis.
#
# Now that we've defined the structure of our graph, we are going to add a
# "layer" to it: that is, define what time of graph it is. In this case, we
# want to make a scatter plot: the name for that layer is geom_point. "geom"
# is a typical start for each of these layers. Now we've defined our graph,
# and hit return, and we see our scatter plot.
ggplot(diamonds, aes(x=carat, y=price)) + geom_point()
# Now, this plot shows two aesthetics- weight and price- but there are many
# other attributes of the data we can communicate. For example, we might
# want to see how the quality of the cut, or the color, or the clarity,
# affects the price.
# Let's add the clarity attritube, which is a measure of the clarity of
# each diamond, to color our points.
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=color)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=clarity, size=cut)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=clarity, shape=cut)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth()
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE, method="lm")
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point() + geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE) + labs(title="Smoothing trends of diamond carat prices by clarity of diamond")
p <- ggplot(diamonds, aes(x=clarity, fill=cut))
p + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
data("mtcars")
head(mtcars)
help(mtcars)
mtcars$mpg
t.test(mpg ~ am, data=mtcars)
tt = t.test(mpg ~ am, data=mtcars)
tt
tt$p.value
tt$conf.int
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
tt$conf.int
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
mtcars$mpg
cor.test(mtcars$mpg, mtcars$wt)
ct = cor.test(mtcars$mpg, mtcars$wt)
ct
ct$p.value
# Similarly, we can extract the estimate by doing $estimate:
ct$estimate
# And much like the t-test, we can get a confidence interval:
ct$conf.int
fit = lm(mpg ~ wt, mtcars)
summary(fit)
fit = lm(mpg ~ wt, mtcars)
# Now we can look at the details of this fit with the summary function:
summary(fit)
coef(summary(fit))
co = coef(summary(fit))
View(co)
co[, 1]
co[, 4]
predict(fit)
summary(fit)
37.2851 + (-5.3445) * 4.5
newcar = data.frame(wt=4.5)
predict(fit, newcar)
ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_smooth(method="lm")
example("read.csv")
ggplot(diamonds, aes(x=carat, y=price)) + geom_point()
getwd()
setwd("Documents/work/")
setwd("R workshop/")
setwd("work after demo feedback/")
