source('~/Documents/work/R workshop/workshop_scripts.R', echo=TRUE)
library(ggplot2)
data(diamonds)
head(diamonds)
p <- ggplot(diamonds, aes(x=clarity, fill=cut))
p + geom_bar()
p <- ggplot(diamonds, aes(cut))
p + geom_histogram()
summary(diamonds)
p <- ggplot(diamonds, aes(cut))
p + geom_bar
p + geom_bar()
p <- ggplot(diamonds, aes(color))
p + geom_bar()
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar()
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + opts(title = "my title")
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + ggtitle("my title")
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + labs(title="Diamonds color count filled by cut count")
p <- ggplot(diamonds, aes(cut))
p + geom_histogram() + labs(title="Diamonds color count filled by cut count")
p <- ggplot(diamonds, aes(x=clarity, fill=cut))
p + geom_bar() + labs(title="Diamonds color count filled by cut count")
p + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE) + labs(title="Smoothing trends of diamond carat prices by clarity of diamond")
help("diamonds")
data("mtcars")
head(mtcars)
help(mtcars)
mtcars$mpg
cor.test(mtcars$mpg, mtcars$wt)
head(mtcars)
mtcars$mpg
mtcars$wt
cor.test(mtcars$mpg, mtcars$wt)
summary(mtcars)
mtcars$mpg
mtcars$wt
cor.test(mtcars$mpg, mtcars$wt)
fit = lm(mpg ~ wt, mtcars)
sumary(fit)
summary(fit)
fit = lm(mpg ~ wt, mtcars)
fit = lm(mpg ~ wt, mtcars)
summary(fit)
3 +5
3 + 5
10 * 10
#
# Basic arithmatic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
#
# Basic arithmatic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
#
# Basic arithmetic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
variable <- 5
variable
x <- 5
y <- 6
y - x
sqrt(x)
sqrt(y)
y <- 9
sqrt(y)
help("diamonds")
help(mtcars)                  # Show the description of the mtcars dataset
example("knit")
example("ggplot")
data <- read.table(file = "./Documents/work/RDM/_data/AAHSL_members_test.tsv", header = T)
data <- read.table(file = "./Documents/work/RDM/_data/AAHSL_members.tsv", header = T)
data <- read.table(file = "./Documents/work/RDM/_data/AAHSL_members_test.tsv", header = T)
data <- read.table("./Documents/work/RDM/_data/AAHSL_members_test.tsv", header = T)
data <- read.csv("./Documents/work/RDM/_data/code_categories.csv", header = T)
summary(data)
library()
library(ggplot2)
data(diamonds)
head(diamonds)
View(diamonds)
help(diamonds)
summary(diamonds)
p <- ggplot(diamonds, aes(x=clarity, fill=cut)) p + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
p <- ggplot(diamonds, aes(x=clarity, fill=cut))
p + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
p <- ggplot(diamonds, aes(x=clarity, fill=cut)) + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
p
bar <- ggplot(diamonds, aes(x=clarity, fill=cut)) + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
bar
bar <- ggplot(diamonds, aes(x=clarity, fill=cut))
+ geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
bar <- ggplot(diamonds, aes(x=clarity, fill=cut))
+ geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
bar <- ggplot(diamonds, aes(x=clarity, fill=cut)) + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
bar
bar <- ggplot(diamonds, aes(x=clarity)) + geom_bar() + labs(title="Counts of diamond clarities")
bar
ggplot(diamonds, aes(x=clarity)) + geom_bar() + labs(title="Counts of diamond clarities")
ggplot(diamonds, aes(x=clarity, fill=cut)) + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
bar1 <- ggplot(diamonds, aes(x=clarity)) + geom_bar() + labs(title="Counts of diamond clarities")
bar1
bar2 <- ggplot(diamonds, aes(x=clarity, fill=cut)) + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
bar2
plot1 <- ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point()
plot1
plot1 <- ggplot(diamonds, aes(x=carat, y=price)) + geom_point()
# show plot
plot1
plot2 <- ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point()
# show plot
plot2
plot3 <- ggplot(diamonds, aes(x=carat, y=price, color=color)) + geom_point()
plot3
plot4 <- ggplot(diamonds, aes(x=carat, y=price, color=clarity, size=cut)) + geom_point()
plot4
plot5 <- ggplot(diamonds, aes(x=carat, y=price, color=clarity, shape=cut)) + geom_point()
# show plot
plot5
plot6 <- ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth()
# show plot
plot6
plot7 <- ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE)
plot7
plot8 <- ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE, method="lm")
# show plot
plot8
plot9 <- ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point() + geom_smooth(se=FALSE)
plot9
plot10 <- ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE)
plot10
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point()
plot11 <- ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point()
plot11
plot11 <- ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point()
# show plot
plot11
# add the facet function
plot11 <- ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + facet_wrap(~ clarity)
plot11
plot11 <- ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + facet_wrap(~ clarity) + ggtitle("Diamond carat, price, and cut by level of diamond clarity")
plot11
getwd()
list.files()
setwd("Documents/work/R workshop/work after demo feedback/")
list.files()
ggsave(filename="diamonds.png", plot11)
list.files()
ggsave(filename="diamonds.jpg", plot11)
ggsave(filename="diamonds.pdf", plot11)
# load the default dataset called mtcars into your current workspace
data("mtcars")
# load the dataset called mtcars into your current workspace (it comes with R by default)
data("mtcars")
# show the first few lines of mtcars data
head(mtcars)
# view the mtcars data
View(mtcars)
# show the documentation for the mtcars data
help(mtcars)
# summarize the mtcars data
summary(mtcars)
mtcars$mpg
mtcars$wt
t.test(mpg ~ am, data=mtcars)
tt = t.test(mpg ~ am, data=mtcars)
tt
tt$p.value
# extract only the confidence interval
tt$conf.int
cor.test(mtcars$mpg, mtcars$wt)
ct = cor.test(mtcars$mpg, mtcars$wt)
# show the correlation test on demand
ct
# extract only the p-value
ct$p.value
ct$estimate
ct$conf.int
fit = lm(mpg ~ wt, mtcars)
fit
summary(fit)
fit = lm(mpg ~ wt, mtcars)
fit
summary(fit)
coef(summary(fit))
co = coef(summary(fit))
co[, 1]
co[, 4]
predict(fit)
summary(fit)
37.2851 + (-5.3445) * 4.5
newcar = data.frame(wt=4.5)
predict(fit, newcar)
# pass the predict function the new data frame
predict(fit, newcar)
ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_smooth(method="lm")
plot12 <- ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_smooth(method="lm")
# show plot
plot12
ggsave(filename="cars.png", plot12)
plot12 <- ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_smooth(method="lm") + ggtitle("Linear model of the relationship between a car's weight and efficiency")
# show plot
plot12
# save the plot as a .png in your current working directory
ggsave(filename="cars.png", plot12)
